@using ShikkhanobishMainWeb.Models
@using Flurl.Http
@using System.Globalization
@inject IJSRuntime jsRuntime

@using Microsoft.AspNetCore.Components;
@page "/"

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <title>MakeQuestion</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta content="Responsive bootstrap 4 admin template" name="description" />
    <meta content="Coderthemes" name="author" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link href="~/css/makeQues.css" />
    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
</head>

<body style="background-color: white">

    <!-- Begin page -->
    <!-- Start Page Content here -->
    <!-- ============================================================== -->



    <div class="content">

        <!-- Start container-fluid -->
        <div class="container-fluid">
            <!--row-->
            <div style="text-align:start">
                <h3 style="color: black; font-size: 18px; font-weight: bold ">Hello, @tName</h3>
            </div>
            
            <br />
            <div class="row">
                <div class="mb-4 col-sm-6 col-lg-3 mb-4 ">
                    <div class="card h-100" style="border-radius: 20px; border-color: transparent">
                        <div class="card-body">
                            <div class="d-flex align-items-center justify-content-between">
                                <div>
                                    <h4 class="fw-normal" style="color: red">$10,500</h4>
                                    <p class="subtitle text-sm text-muted mb-0">Earnings</p>
                                    <h4 class="fw-normal" style="color: red">$10,500</h4>
                                    <p class="subtitle text-sm text-muted mb-0">Earnings</p>
                                </div>

                                <div class="flex-shrink-0 ms-3" style="color: red">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-cloud-upload" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M4.406 1.342A5.53 5.53 0 0 1 8 0c2.69 0 4.923 2 5.166 4.579C14.758 4.804 16 6.137 16 7.773 16 9.569 14.502 11 12.687 11H10a.5.5 0 0 1 0-1h2.688C13.979 10 15 8.988 15 7.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 2.825 10.328 1 8 1a4.53 4.53 0 0 0-2.941 1.1c-.757.652-1.153 1.438-1.153 2.055v.448l-.445.049C2.064 4.805 1 5.952 1 7.318 1 8.785 2.23 10 3.781 10H6a.5.5 0 0 1 0 1H3.781C1.708 11 0 9.366 0 7.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383z" />
                                        <path fill-rule="evenodd" d="M7.646 4.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V14.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3z" />
                                    </svg>
                                </div>

                            </div>
                        </div>
                        <div class="card-footer py-3" style="background-color: #f8d7da; border-radius: 20px; border-color: transparent">
                            <div class="row align-items-center" style="color: red">
                                <div class="col-12" style="text-align:center">
                                    <p class="mb-0">Total Upload</p>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                <div class="mb-4 col-sm-6 col-lg-3 mb-4 ">
                    <div class="card h-100" style="border-radius: 20px; border-color: transparent">
                        <div class="card-body">
                            <div class="d-flex align-items-center justify-content-between">
                                <div>
                                    <h4 class="fw-normal" style="color: red">$10,500</h4>
                                    <p class="subtitle text-sm text-muted mb-0">Earnings</p>
                                    <h4 class="fw-normal" style="color: red">$10,500</h4>
                                    <p class="subtitle text-sm text-muted mb-0">Earnings</p>
                                </div>

                                <div class="flex-shrink-0 ms-3" style="color: red">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-cloud-upload" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M4.406 1.342A5.53 5.53 0 0 1 8 0c2.69 0 4.923 2 5.166 4.579C14.758 4.804 16 6.137 16 7.773 16 9.569 14.502 11 12.687 11H10a.5.5 0 0 1 0-1h2.688C13.979 10 15 8.988 15 7.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 2.825 10.328 1 8 1a4.53 4.53 0 0 0-2.941 1.1c-.757.652-1.153 1.438-1.153 2.055v.448l-.445.049C2.064 4.805 1 5.952 1 7.318 1 8.785 2.23 10 3.781 10H6a.5.5 0 0 1 0 1H3.781C1.708 11 0 9.366 0 7.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383z" />
                                        <path fill-rule="evenodd" d="M7.646 4.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V14.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3z" />
                                    </svg>
                                </div>

                            </div>
                        </div>
                        <div class="card-footer py-3" style="background-color: #f8d7da; border-radius: 20px; border-color: transparent">
                            <div class="row align-items-center" style="color: red">
                                <div class="col-12" style="text-align:center">
                                    <p class="mb-0">Total Upload</p>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                <div class="mb-4 col-sm-6 col-lg-3 mb-4 ">
                    <div class="card h-100" style="border-radius: 20px; border-color: transparent">
                        <div class="card-body">
                            <div class="d-flex align-items-center justify-content-between">
                                <div>
                                    <h4 class="fw-normal" style="color: red">$10,500</h4>
                                    <p class="subtitle text-sm text-muted mb-0">Earnings</p>
                                    <h4 class="fw-normal" style="color: red">$10,500</h4>
                                    <p class="subtitle text-sm text-muted mb-0">Earnings</p>
                                </div>

                                <div class="flex-shrink-0 ms-3" style="color: red">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-cloud-upload" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M4.406 1.342A5.53 5.53 0 0 1 8 0c2.69 0 4.923 2 5.166 4.579C14.758 4.804 16 6.137 16 7.773 16 9.569 14.502 11 12.687 11H10a.5.5 0 0 1 0-1h2.688C13.979 10 15 8.988 15 7.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 2.825 10.328 1 8 1a4.53 4.53 0 0 0-2.941 1.1c-.757.652-1.153 1.438-1.153 2.055v.448l-.445.049C2.064 4.805 1 5.952 1 7.318 1 8.785 2.23 10 3.781 10H6a.5.5 0 0 1 0 1H3.781C1.708 11 0 9.366 0 7.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383z" />
                                        <path fill-rule="evenodd" d="M7.646 4.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V14.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3z" />
                                    </svg>
                                </div>

                            </div>
                        </div>
                        <div class="card-footer py-3" style="background-color: #f8d7da; border-radius: 20px; border-color: transparent">
                            <div class="row align-items-center" style="color: red">
                                <div class="col-12" style="text-align:center">
                                    <p class="mb-0">Total Upload</p>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                <div class="mb-4 col-sm-6 col-lg-3 mb-4 ">
                    <div class="card h-100 " style="border-radius: 20px; border-color: transparent">
                        <div class="card-body">
                            <div class="d-flex align-items-center justify-content-between">
                                <div>
                                    <h4 class="fw-normal" style="color: red">$10,500</h4>
                                    <p class="subtitle text-sm text-muted mb-0">Earnings</p>
                                    <h4 class="fw-normal" style="color: red">$10,500</h4>
                                    <p class="subtitle text-sm text-muted mb-0">Earnings</p>
                                </div>

                                <div class="flex-shrink-0 ms-3" style="color: red">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-cloud-upload" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M4.406 1.342A5.53 5.53 0 0 1 8 0c2.69 0 4.923 2 5.166 4.579C14.758 4.804 16 6.137 16 7.773 16 9.569 14.502 11 12.687 11H10a.5.5 0 0 1 0-1h2.688C13.979 10 15 8.988 15 7.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 2.825 10.328 1 8 1a4.53 4.53 0 0 0-2.941 1.1c-.757.652-1.153 1.438-1.153 2.055v.448l-.445.049C2.064 4.805 1 5.952 1 7.318 1 8.785 2.23 10 3.781 10H6a.5.5 0 0 1 0 1H3.781C1.708 11 0 9.366 0 7.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383z" />
                                        <path fill-rule="evenodd" d="M7.646 4.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V14.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3z" />
                                    </svg>
                                </div>

                            </div>
                        </div>
                        <div class="card-footer py-3" style="background-color: #f8d7da; border-radius: 20px; border-color: transparent">
                            <div class="row align-items-center" style="color: red">
                                <div class="col-12" style="text-align:center">
                                    <p class="mb-0">Total Upload</p>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
         
           

            <div class="row" style="background-color: transparent">

                <div class="col-6">
                    <div class="col-auto">
                        <div class="card h-100" style="border-radius:15px; border-color: transparent">
                            <div class="card-header shadow-sm" style="background-color: #EBFAFF; border-color: transparent">
                                <h3 class="card-heading" style="color: #043C4E">Active MCQ Task</h3>
                            </div>
                            <div class="card-body pt-3 row">
                                <div class="col-auto">
                                    <div class="row">
                                        <div class="col-10" style="font-size: 10px">
                                            <p>Assign Date: 20.02.2022</p>
                                        </div>
                                        <div class="col-1" style="text-align: right">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-card-checklist" viewBox="0 0 16 16">
                                                <path d="M14.5 3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h13zm-13-1A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-13z" />
                                                <path d="M7 5.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm-1.496-.854a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 1 1 .708-.708l.146.147 1.146-1.147a.5.5 0 0 1 .708 0zM7 9.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm-1.496-.854a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 0 1 .708-.708l.146.147 1.146-1.147a.5.5 0 0 1 .708 0z" />
                                            </svg>
                                        </div>
                                        <div class="col-1" style="text-align: right; color: dodgerblue">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-bar-chart-fill" viewBox="0 0 16 16">
                                                <path d="M1 11a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-3zm5-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7zm5-5a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V2z" />
                                            </svg>
                                            
                                        </div>
                                    </div>
                                    <div class="icon icon-xl bg-primary-light mx-auto mb-3" style="text-align: center">
                                        <button class="btn btn-primary">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-filetype-pdf" viewBox="0 0 16 16">
                                                <path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2h-1v-1h1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM1.6 11.85H0v3.999h.791v-1.342h.803c.287 0 .531-.057.732-.173.203-.117.358-.275.463-.474a1.42 1.42 0 0 0 .161-.677c0-.25-.053-.476-.158-.677a1.176 1.176 0 0 0-.46-.477c-.2-.12-.443-.179-.732-.179Zm.545 1.333a.795.795 0 0 1-.085.38.574.574 0 0 1-.238.241.794.794 0 0 1-.375.082H.788V12.48h.66c.218 0 .389.06.512.181.123.122.185.296.185.522Zm1.217-1.333v3.999h1.46c.401 0 .734-.08.998-.237a1.45 1.45 0 0 0 .595-.689c.13-.3.196-.662.196-1.084 0-.42-.065-.778-.196-1.075a1.426 1.426 0 0 0-.589-.68c-.264-.156-.599-.234-1.005-.234H3.362Zm.791.645h.563c.248 0 .45.05.609.152a.89.89 0 0 1 .354.454c.079.201.118.452.118.753a2.3 2.3 0 0 1-.068.592 1.14 1.14 0 0 1-.196.422.8.8 0 0 1-.334.252 1.298 1.298 0 0 1-.483.082h-.563v-2.707Zm3.743 1.763v1.591h-.79V11.85h2.548v.653H7.896v1.117h1.606v.638H7.896Z" />
                                            </svg>
                                            <p style="font-size: 10px">drive.google.com/sadasda/sadsad/sadsdaasdd</p>
                                        </button>

                                    </div>
                                   
                                    <div class="row position-relative" style="top: 10px;">
                                        <div class="col-4 text-center">
                                            <p class="text-muted text-sm">Class</p>
                                            <div style="font-size: 11px">This is a crazy fak topic man</div>
                                        </div>
                                        <div class="col-4 text-center">
                                            <p class="text-muted text-sm">Subject</p>
                                            <div style="font-size: 11px">This is a crazy fak topic man</div>
                                        </div>
                                        <div class="col-4 text-center">
                                            <p class="text-muted text-sm">Chapter</p>
                                            <div style="font-size: 11px">This is a crazy fak topic man</div>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>



                <div class="col-6">
                    <div class="col-auto">
                        <div class="card h-100 shadow-sm" style="border-radius:15px; border-color: transparent">
                            <div class="card-header" style="background-color: #EBFAFF">
                                <h3 class="card-heading" style="color: #043C4E">Active Creative Task</h3>
                            </div>
                            <div class="card-body pt-3 row">
                                <div class="col-auto">
                                    <div class="row">
                                        <div class="col-6" style="font-size: 10px">
                                            <p>Assign Date: 20.02.2022</p>
                                        </div>
                                        <div class="col-6" style="text-align: right">
                                            <p>Active</p>
                                        </div>
                                    </div>
                                    <div class="icon icon-xl bg-primary-light mx-auto mb-3" style="text-align: center">
                                        <button class="btn btn-primary">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-filetype-pdf" viewBox="0 0 16 16">
                                                <path fill-rule="evenodd" d="M14 4.5V14a2 2 0 0 1-2 2h-1v-1h1a1 1 0 0 0 1-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5ZM1.6 11.85H0v3.999h.791v-1.342h.803c.287 0 .531-.057.732-.173.203-.117.358-.275.463-.474a1.42 1.42 0 0 0 .161-.677c0-.25-.053-.476-.158-.677a1.176 1.176 0 0 0-.46-.477c-.2-.12-.443-.179-.732-.179Zm.545 1.333a.795.795 0 0 1-.085.38.574.574 0 0 1-.238.241.794.794 0 0 1-.375.082H.788V12.48h.66c.218 0 .389.06.512.181.123.122.185.296.185.522Zm1.217-1.333v3.999h1.46c.401 0 .734-.08.998-.237a1.45 1.45 0 0 0 .595-.689c.13-.3.196-.662.196-1.084 0-.42-.065-.778-.196-1.075a1.426 1.426 0 0 0-.589-.68c-.264-.156-.599-.234-1.005-.234H3.362Zm.791.645h.563c.248 0 .45.05.609.152a.89.89 0 0 1 .354.454c.079.201.118.452.118.753a2.3 2.3 0 0 1-.068.592 1.14 1.14 0 0 1-.196.422.8.8 0 0 1-.334.252 1.298 1.298 0 0 1-.483.082h-.563v-2.707Zm3.743 1.763v1.591h-.79V11.85h2.548v.653H7.896v1.117h1.606v.638H7.896Z" />
                                            </svg>
                                            <p style="font-size: 10px">drive.google.com/sadasda/sadsad/sadsdaasdd</p>
                                        </button>

                                    </div>
                                    <div class="row position-relative" style="top: 10px;">
                                        <div class="col-4 text-center">
                                            <p class="text-muted text-sm">Class</p>
                                            <div style="font-size: 11px">This is a crazy fak topic man</div>
                                        </div>
                                        <div class="col-4 text-center">
                                            <p class="text-muted text-sm">Subject</p>
                                            <div style="font-size: 11px">This is a crazy fak topic man</div>
                                        </div>
                                        <div class="col-4 text-center">
                                            <p class="text-muted text-sm">Chapter</p>
                                            <div style="font-size: 11px">This is a crazy fak topic man</div>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        <br />
        <br />
        <br />
        <!-- end container-fluid -->
        <!-- Footer Start -->
        <footer class="footer">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-12">
                        2021 &copy; shikkhanobish
                    </div>
                </div>
            </div>
        </footer>
        <!-- end Footer -->
    </div>
    <!-- end content -->
    <!-- END wrapper -->
    <!-- Vendor js -->
        </div>
</body>
</html>

@code{
    public string tID { get; set; }
    public string thismcqNumber { get; set; }
    public string thisShowchapterName { get; set; }
    string makeTaskError { get; set; }
    bool canMakenewTask;
    public int tup, tap, tde, tpe;
    string link { get; set; }
    public string tName { get; set; }
    string url { get; set; }
    int countTQH;
    int prgs;
    DateTime StaringWeek;
    dataentryOperatorTask Liveitem { get; set; }
    string MakeQSTxt { get; set; }
    string linkTxtColor { get; set; }
    List<TeacherQuesHistory> tqhList = new List<TeacherQuesHistory>();
    List<CreativeQuestion> thisopCreativeQs = new List<CreativeQuestion>();
    List<Question> questionList = new List<Question>();
    List<Question> showQSList = new List<Question>();
    List<Question> showQSList1 = new List<Question>();
    List<Question> showQSList2 = new List<Question>();
    List<Question> showQSList3 = new List<Question>();
    List<Question> showQSList4 = new List<Question>();
    List<Teacher> teacherList = new List<Teacher>();
    List<ClassInfo> allClassList = new List<ClassInfo>();
    List<Subject> allSubject = new List<Subject>();
    List<Chapter> allChapter = new List<Chapter>();
    int prgsValue { get; set; }
    int firstWeekTotal;
    int secWeekTotal;
    int thirftWeekTotal;
    int forthWeekTotal;
    List<CreativeQuestion> thisopCreativeqs = new List<CreativeQuestion>();
    List<CreativeQuestion> allcreativeqs = new List<CreativeQuestion>();

    string showprgs { get; set; }
    List<Chapter> allc = new List<Chapter>();
    List<Subject> allsub = new List<Subject>();
    List<ClassInfo> allClass = new List<ClassInfo>();
    List<Teacher> teacherListN = new List<Teacher>();
    List<TeacherQuesHistory> thList = new List<TeacherQuesHistory>();
    List<dataentryOperatorTask> MCQTask  = new List<dataentryOperatorTask>();
    List<dataentryOperatorTask> CreativeTask = new List<dataentryOperatorTask>();
    List<dataentryOperatorTask> LiveshowInfo = new List<dataentryOperatorTask>();
    List<teacherSubmitHistory> allSubmitHistory = new List<teacherSubmitHistory>();

    List<Question> quesList = new List<Question>();
    string selectedColorone = "";
    string selectedColortwo = "";
    string selectedColorthree = "";
    string selectedColorfour = "";
    string thisLink;
    string lastTaskEndTime;
    List<dataentryOperatorTask> operatorList = new List<dataentryOperatorTask>();
    int reload = 0;
    protected override async Task OnInitializedAsync()
    {
        tID = StaticPageToPassData.thisOperatorID;
        makeTaskError = "";
        canMakenewTask = true;
        MakeQSTxt = "Make New Task";
        await Refresh();
    }
    public async Task Refresh()
    {


        linkTxtColor = "Gray;";
        showprgs = "Block";
        StateHasChanged();
        await Task.Run(() => prgsValue = 10);
        await getAllInfo();
        StateHasChanged();
        await Task.Run(() => prgsValue = 20);
        await GetTeacherQuestionHistory();
        StateHasChanged();
        await Task.Run(() => prgsValue = 30);
        await GetHistoryCount();
        await Task.Run(() => prgsValue = 40);
        StateHasChanged();
        await GetTeacherWithID();
        await Task.Run(() => prgsValue = 60);
        StateHasChanged();
        await Task.Run(() => prgsValue = 100);
        showprgs = "None";
        await Task.Run(() => prgsValue = 0);
        // await AutomatedTaskAssigner(int.Parse(tID));
        StateHasChanged();
    }
    public async Task ShowMCQModal(string mcqNumber, string name)
    {
        thismcqNumber = mcqNumber;
        thisShowchapterName = name;

    }
    public async Task makenewtak()
    {
        await AutomatedTaskAssigner(int.Parse(tID));
    }

    private void selectFileLink(ChangeEventArgs task)
    {
        if(task.Value.ToString() != "")
        {
            if (task.Value.ToString()[0] == 'S')
            {
                linkTxtColor = "Gray";
                url = "";
            }
            else
            {
                linkTxtColor = "Blue";
                url = task.Value.ToString();
            }
            link = task.Value.ToString();
        }


    }
    public async Task getAllInfo()
    {
        allc = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getChapter".GetJsonAsync<List<Chapter>>();
        allsub = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getSubject".GetJsonAsync<List<Subject>>();
        allClass = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getClassInfo".GetJsonAsync<List<ClassInfo>>();
        operatorList = await "https://api.shikkhanobish.com/api/ShikkhanobishTeacher/getdataentryOperatorTask".PostJsonAsync(new { }).ReceiveJson<List<dataentryOperatorTask>>();
        teacherListN = await "https://api.shikkhanobish.com/api/ShikkhanobishTeacher/getAllTeacher".PostJsonAsync(new { }).ReceiveJson<List<Teacher>>();
        thList = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getTeacherQuestionHistory".GetJsonAsync<List<TeacherQuesHistory>>();
        quesList = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getQuestion".GetJsonAsync<List<Question>>();
        allcreativeqs = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getCreativeQuestion".GetJsonAsync<List<CreativeQuestion>>();
        allSubmitHistory = await "https://api.shikkhanobish.com/api/ShikkhanobishTeacher/getTeacherSubmitHistory".GetJsonAsync<List<teacherSubmitHistory>>();
        for (int i = 0; i < allcreativeqs.Count; i++)
        {
            for (int j = 0; j < allSubmitHistory.Count; j++)
            {
                if (allcreativeqs[i].cQuestionID == allSubmitHistory[j].questionID)
                {
                    thisopCreativeQs.Add(allcreativeqs[i]);
                }
            }
        }
        thisopCreativeqs = thisopCreativeQs;
        SortTaskList();
    }


    public void SortTaskList()
    {
        int taskindex = 0;
        List<dataentryOperatorTask> thisOpList = new List<dataentryOperatorTask>();

        for(int i = 0; i < operatorList.Count; i++)
        {
            if(int.Parse(tID) == operatorList[i].userID)
            {
                thisOpList.Add(operatorList[i]);
            }
        }
        for (int i = 0; i < thisOpList.Count; i++)
        {
            if (thisOpList[i].userID == int.Parse(tID))
            {
                string link = "";
                string cleanMCQNumber = "";
                bool now = false;
                bool cleanNow = false;
                taskindex++;
                thisOpList[i].index = taskindex;
                foreach (var ch in thisOpList[i].MCQNumbers)
                {

                    if (now)
                    {
                        link += ch;
                    }
                    if (ch == '#')
                    {
                        now = true;
                    }
                    if (ch == 'L')
                    {
                        cleanNow = true;
                    }
                    if (!cleanNow)
                    {
                        cleanMCQNumber += ch;
                    }

                }
                thisOpList[i].FileLink = link;
                thisOpList[i].MCQNumbers = cleanMCQNumber;
                if (thisOpList[i].reMain < 0)
                {
                    thisOpList[i].reMain = 0;
                }
                thisOpList[i].statusColor = "#979797";
                if (thisOpList[i].submitted >= 100)
                {
                    thisOpList[i].isTaskSubDone = "Block";
                    thisOpList[i].isTaskSubPending = "None";
                    thisOpList[i].isTaskSubNootDone = "None";
                    thisOpList[i].isTaskSubColor = "#08B483";
                }
                else
                {
                    thisOpList[i].isTaskSubNootDone = "Block";
                    thisOpList[i].isTaskSubDone = "None";
                    thisOpList[i].isTaskSubPending = "None";
                    thisOpList[i].isTaskSubColor = "#CE0C0C";
                }

                if (thisOpList[i].ActiveStatus == "Active")
                {
                    thisOpList[i].statusColor = "#541BD7";
                    thisOpList[i].isTaskSubPending = "Block";
                    thisOpList[i].isTaskSubDone = "None";
                    thisOpList[i].isTaskSubNootDone = "None";
                    thisOpList[i].isTaskSubColor = "#BFB10C";
                    thisOpList[i].status = "Active";
                }


            }

        }
        List<dataentryOperatorTask> shownow = new List<dataentryOperatorTask>();

        for (int u = 0; u < thisOpList.Count; u++)
        {
            if (thisOpList[u].userID == int.Parse(tID))
            {

                shownow.Add(thisOpList[u]);
            }
        }

        for (int m = 0; m < shownow.Count; m++)
        {
            if (shownow[m].status == "Active")
            {
                Liveitem = shownow[m];
            }
            for (int i = 0; i < allc.Count; i++)
            {
                if (allc[i].chapterID == shownow[m].chapterID)
                {
                    shownow[m].chapterName = allc[i].name;
                    for (int j = 0; j < allsub.Count; j++)
                    {
                        if (allsub[j].subjectID == allc[i].subjectID)
                        {
                            shownow[m].SubejctName = allsub[j].name;
                            for (int k = 0; k < allClass.Count; k++)
                            {
                                if (allsub[j].classID == allClass[k].classID)
                                {
                                    shownow[m].ClassName = allClass[k].name;
                                }
                            }
                        }
                    }
                }
            }
        }
        for(int i = 0; i < shownow.Count; i++)
        {
            if(shownow[i].taskType == 1)
            {
                MCQTask.Add(shownow[i]);
            }
            else
            {
                CreativeTask.Add(shownow[i]);
            }
        }
        List<dataentryOperatorTask> SortedList = new List<dataentryOperatorTask>();
        SortedList = MCQTask.OrderBy(x => x.ActiveStatus).ToList();
        MCQTask = SortedList;
        SortedList = CreativeTask.OrderBy(x => x.ActiveStatus).ToList();
        CreativeTask = SortedList;

        //LiveshowInfo = shownow;


    }






    public async Task GetTask()
    {


        List<dataentryOperatorTask> thisOpList = new List<dataentryOperatorTask>();
        List<dataentryOperatorTask> LivethisOpList = new List<dataentryOperatorTask>();
        foreach (var teacher in teacherListN)
        {
            if (teacher.teacherID == int.Parse(tID))
            {
                tName = teacher.name;
                break;
            }
        }

        CultureInfo culturen = new CultureInfo("en-US");
        thisOpList = operatorList;

        List<string> activeTaskList = new List<string>();
        List<int> doneOP = new List<int>();
        List<dataentryOperatorTask> thisopTask = new List<dataentryOperatorTask>();
        for (int i = 0; i < thisOpList.Count; i++)
        {
            thisOpList[i] = operatorList[i];
            for (int z = 0; z < teacherList.Count; z++)
            {
                if (thisOpList[i].userID == teacherList[z].teacherID)
                {
                    thisOpList[i].userName = teacherList[z].name;
                    break;
                }
            }
            for (int e = 0; e < allc.Count; e++)
            {
                if (allc[e].chapterID == thisOpList[i].chapterID)
                {
                    thisOpList[i].chapterName = allc[e].name;
                    break;
                }
            }
            //indivisual TAsk
            thisopTask = new List<dataentryOperatorTask>();
            bool shouldCheck = true;
            for (int j = 0; j < doneOP.Count; j++)
            {
                if (doneOP[j] == thisOpList[i].userID)
                {
                    shouldCheck = false;
                }
            }

            if (shouldCheck)
            {
                if (thisOpList[i].userID == int.Parse(tID))
                {
                    doneOP.Add(thisOpList[i].userID);
                    for (int k = 0; k < thisOpList.Count; k++)
                    {
                        if (thisOpList[i].userID == thisOpList[k].userID)
                        {
                            thisopTask.Add(thisOpList[k]);
                        }
                    }
                    ////// submit count
                    List<dataentryOperatorTask> SortedListN = new List<dataentryOperatorTask>();
                    SortedListN = thisopTask.OrderBy(x => x.startTime).ToList();
                    thisopTask = SortedListN;
                    int submitted = 0;
                    for (int k = 0; k < thisopTask.Count; k++)
                    {
                        for (int j = 0; j < thList.Count; j++)
                        {
                            if (thisopTask[k].userID == thList[j].teacherID)
                            {
                                CultureInfo culture = new CultureInfo("en-US");
                                DateTime HistoryDateFormat = DateTime.ParseExact(thList[j].review, "dd'-'MM'-'yyyy' 'HH':'mm':'ss", culture);
                                DateTime TaskDateFormatSt = DateTime.ParseExact(thisopTask[k].startTime, "MM/dd/yyyy hh:mm tt", culture);
                                DateTime TaskDateFormatEnd = new DateTime();
                                if (k == thisopTask.Count - 1)
                                {
                                    TaskDateFormatEnd = DateTime.Now;
                                }
                                else
                                {
                                    TaskDateFormatEnd = DateTime.ParseExact(thisopTask[k + 1].startTime, "MM/dd/yyyy hh:mm tt", culture);
                                }

                                if (TaskDateFormatSt < HistoryDateFormat && TaskDateFormatEnd > HistoryDateFormat)
                                {
                                    thisopTask[k].submitted++;
                                }
                            }

                        }
                        for (int l = 0; l < thisOpList.Count; l++)
                        {
                            if (thisOpList[l].taskID == thisopTask[k].taskID)
                            {
                                thisOpList[l].submitted = thisopTask[k].submitted;
                            }
                        }

                    }


                    ////// Active Define
                    var lastActive = DateTime.ParseExact(thisopTask[0].startTime, "MM/dd/yyyy hh:mm tt", culturen);
                    int indexID = 0;
                    for (int l = 0; l < thisopTask.Count; l++)
                    {
                        var thisDatetime = DateTime.ParseExact(thisopTask[l].startTime, "MM/dd/yyyy hh:mm tt", culturen);
                        if (lastActive < thisDatetime)
                        {
                            indexID = l;
                            lastActive = thisDatetime;
                        }
                    }
                    activeTaskList.Add(thisopTask[indexID].taskID);
                    var lastActiveTime = DateTime.ParseExact(thisopTask[indexID].endTime, "MM/dd/yyyy hh:mm tt", culturen);
                    var thisTime = DateTime.Now;

                    if (lastActiveTime < thisTime)
                    {
                        canMakenewTask = true;
                    }
                    else
                    {
                        canMakenewTask = false;
                    }
                    lastTaskEndTime = thisopTask[indexID].endTime;
                }

            }

        }
        for (int i = 0; i < thisOpList.Count; i++)
        {
            if (thisOpList[i].userID == int.Parse(tID))
            {
                string link = "";
                string cleanMCQNumber = "";
                bool now = false;
                bool cleanNow = false;
                foreach (var ch in thisOpList[i].MCQNumbers)
                {

                    if (now)
                    {
                        link += ch;
                    }
                    if (ch == '#')
                    {
                        now = true;
                    }
                    if (ch == 'L')
                    {
                        cleanNow = true;
                    }
                    if (!cleanNow)
                    {
                        cleanMCQNumber += ch;
                    }

                }
                thisOpList[i].FileLink = link;
                thisOpList[i].MCQNumbers = cleanMCQNumber;
                if (thisOpList[i].reMain < 0)
                {
                    thisOpList[i].reMain = 0;
                }
                thisOpList[i].statusColor = "#979797";
                if (thisOpList[i].submitted >= 100)
                {
                    thisOpList[i].isTaskSubDone = "Block";
                    thisOpList[i].isTaskSubPending = "None";
                    thisOpList[i].isTaskSubNootDone = "None";
                    thisOpList[i].isTaskSubColor = "#08B483";
                }
                else
                {
                    thisOpList[i].isTaskSubNootDone = "Block";
                    thisOpList[i].isTaskSubDone = "None";
                    thisOpList[i].isTaskSubPending = "None";
                    thisOpList[i].isTaskSubColor = "#CE0C0C";
                }
                thisOpList[i].status = "Inactive";
                ////
                for (int j = 0; j < activeTaskList.Count; j++)
                {
                    if (activeTaskList[j] == thisOpList[i].taskID)
                    {
                        thisOpList[i].statusColor = "#541BD7";
                        thisOpList[i].isTaskSubPending = "Block";
                        thisOpList[i].isTaskSubDone = "None";
                        thisOpList[i].isTaskSubNootDone = "None";
                        thisOpList[i].isTaskSubColor = "#BFB10C";
                        thisOpList[i].status = "Active";
                    }
                }
                ///
                var nt = DateTime.ParseExact(thisOpList[i].startTime, "MM/dd/yyyy hh:mm tt", culturen);
                thisOpList[i].startTime = nt.ToString("dd/MM/yyyy hh:mm tt");
                nt = DateTime.ParseExact(thisOpList[i].endTime, "MM/dd/yyyy hh:mm tt", culturen);
                thisOpList[i].endTime = nt.ToString("dd/MM/yyyy hh:mm tt");

            }

        }
        List<dataentryOperatorTask> shownow = new List<dataentryOperatorTask>();
        int taskindex = 0;
        for (int u = 0; u < thisOpList.Count; u++)
        {
            if (thisOpList[u].userID == int.Parse(tID))
            {
                taskindex++;
                thisOpList[u].index = taskindex;
                shownow.Add(thisOpList[u]);
            }
        }
        List<dataentryOperatorTask> SortedList = new List<dataentryOperatorTask>();
        SortedList = shownow.OrderBy(x => x.startTime).ToList();
        SortedList.Reverse();
        shownow = SortedList;
        for (int m = 0; m < shownow.Count; m++)
        {
            if (shownow[m].status == "Active")
            {
                Liveitem = shownow[m];
            }
            for (int i = 0; i < allc.Count; i++)
            {
                if (allc[i].chapterID == shownow[m].chapterID)
                {
                    for (int j = 0; j < allsub.Count; j++)
                    {
                        if (allsub[j].subjectID == allc[i].subjectID)
                        {
                            shownow[m].SubejctName = allsub[j].name;
                            for (int k = 0; k < allClass.Count; k++)
                            {
                                if (allsub[j].classID == allClass[k].classID)
                                {
                                    shownow[m].ClassName = allClass[k].name;
                                }
                            }
                        }
                    }
                }
            }
        }

        LiveshowInfo = shownow;








    }

    public async Task GetOperatorInfo()
    {
        List<dataentryOperatorTask> thisOpList = new List<dataentryOperatorTask>();
        List<dataentryOperatorTask> LivethisOpList = new List<dataentryOperatorTask>();
        foreach (var teacher in teacherListN)
        {
            if (teacher.teacherID == int.Parse(tID))
            {
                tName = teacher.name;
                break;
            }
        }

        CultureInfo culturen = new CultureInfo("en-US");
        thisOpList = operatorList;

        List<string> activeTaskList = new List<string>();
        List<int> doneOP = new List<int>();
        List<dataentryOperatorTask> thisopTask = new List<dataentryOperatorTask>();
        for (int i = 0; i < thisOpList.Count; i++)
        {
            thisOpList[i] = operatorList[i];
            for (int z = 0; z < teacherList.Count; z++)
            {
                if (thisOpList[i].userID == teacherList[z].teacherID)
                {
                    thisOpList[i].userName = teacherList[z].name;
                    break;
                }
            }
            for (int e = 0; e < allc.Count; e++)
            {
                if (allc[e].chapterID == thisOpList[i].chapterID)
                {
                    thisOpList[i].chapterName = allc[e].name;
                    break;
                }
            }
            //indivisual TAsk
            thisopTask = new List<dataentryOperatorTask>();
            bool shouldCheck = true;
            for (int j = 0; j < doneOP.Count; j++)
            {
                if (doneOP[j] == thisOpList[i].userID)
                {
                    shouldCheck = false;
                }
            }

            if (shouldCheck)
            {
                doneOP.Add(thisOpList[i].userID);
                for (int k = 0; k < thisOpList.Count; k++)
                {
                    if (thisOpList[i].userID == thisOpList[k].userID)
                    {
                        thisopTask.Add(thisOpList[k]);
                    }
                }




            }

        }
        for (int l = 0; l < operatorList.Count; l++)
        {
            List<int> listofTHisOPQuestionID = new List<int>();
            for (int k = 0; k < quesList.Count; k++)
            {
                if (operatorList[l].chapterID == quesList[k].chapterID)
                {
                    listofTHisOPQuestionID.Add(quesList[k].questionID);
                }
            }
            CultureInfo culture = new CultureInfo("en-US");
            DateTime TaskDateFormatSt = DateTime.ParseExact(operatorList[l].startTime, "MM/dd/yyyy hh:mm tt", culture);
            for (int p = 0; p < thList.Count; p++)
            {
                for (int o = 0; o < listofTHisOPQuestionID.Count; o++)
                {
                    if (listofTHisOPQuestionID[o] == thList[p].questionID)
                    {
                        DateTime HistoryDateFormat = DateTime.ParseExact(thList[p].review, "dd'-'MM'-'yyyy' 'HH':'mm':'ss", culture);

                        if (HistoryDateFormat >= TaskDateFormatSt)
                        {
                            thisOpList[l].submitted++;

                        }
                    }

                }

            }


        }
        for (int i = 0; i < thisOpList.Count; i++)
        {
            string link = "";
            string cleanMCQNumber = "";
            bool now = false;
            bool cleanNow = false;
            foreach (var ch in thisOpList[i].MCQNumbers)
            {

                if (now)
                {
                    link += ch;
                }
                if (ch == '#')
                {
                    now = true;
                }
                if (ch == 'L')
                {
                    cleanNow = true;
                }
                if (!cleanNow)
                {
                    cleanMCQNumber += ch;
                }

            }
            thisOpList[i].MCQNumbers = cleanMCQNumber;
            thisOpList[i].FileLink = link;
            if (thisOpList[i].submitted > 150)
            {
                thisOpList[i].reMain = 0;
            }
            else
            {
                thisOpList[i].reMain = 150 - thisOpList[i].submitted;
            }
            thisOpList[i].statusColor = "#979797";
            if (thisOpList[i].submitted >= 150)
            {
                thisOpList[i].isTaskSubDone = "Block";
                thisOpList[i].isTaskSubPending = "None";
                thisOpList[i].isTaskSubNootDone = "None";
                thisOpList[i].isTaskSubColor = "#08B483";
            }
            else
            {
                thisOpList[i].isTaskSubNootDone = "Block";
                thisOpList[i].isTaskSubDone = "None";
                thisOpList[i].isTaskSubPending = "None";
                thisOpList[i].isTaskSubColor = "#CE0C0C";
            }
            thisOpList[i].status = "Inactive";
            ////
            for (int j = 0; j < activeTaskList.Count; j++)
            {
                if (activeTaskList[j] == thisOpList[i].taskID)
                {
                    thisOpList[i].statusColor = "#541BD7";
                    thisOpList[i].isTaskSubPending = "Block";
                    thisOpList[i].isTaskSubDone = "None";
                    thisOpList[i].isTaskSubNootDone = "None";
                    thisOpList[i].isTaskSubColor = "#BFB10C";
                    thisOpList[i].status = "Active";
                }
            }
            ///
            var nt = DateTime.ParseExact(thisOpList[i].startTime, "MM/dd/yyyy hh:mm tt", culturen);
            thisOpList[i].startTime = nt.ToString("dd/MM/yyyy hh:mm tt");
            nt = DateTime.ParseExact(thisOpList[i].endTime, "MM/dd/yyyy hh:mm tt", culturen);
            thisOpList[i].endTime = nt.ToString("dd/MM/yyyy hh:mm tt");
        }
        int count = 0;
        List<dataentryOperatorTask> taskList = new List<dataentryOperatorTask>();
        for (int i = 0; i < thisOpList.Count; i++)
        {
            if (thisOpList[i].userID == int.Parse(tID))
            {
                count++;
                thisOpList[i].index = count;
                taskList.Add(thisOpList[i]);
            }
        }

        for (int m = 0; m < taskList.Count; m++)
        {
            for (int i = 0; i < allc.Count; i++)
            {
                if (allc[i].chapterID == taskList[m].chapterID)
                {
                    for (int j = 0; j < allsub.Count; j++)
                    {
                        if (allsub[j].subjectID == allc[i].subjectID)
                        {
                            taskList[m].SubejctName = allsub[j].name;
                            for (int k = 0; k < allClass.Count; k++)
                            {
                                if (allsub[j].classID == allClass[k].classID)
                                {
                                    taskList[m].ClassName = allClass[k].name;
                                }
                            }
                        }
                    }
                }
            }
        }
        ////// Active Define
        DateTime startingDate = new DateTime(2022, 2, 7);
        for (int l = 0; l < taskList.Count; l++)
        {
            CultureInfo culture = new CultureInfo("en-US");
            DateTime thisDate = DateTime.ParseExact(taskList[l].startTime, "dd/MM/yyyy hh:mm tt", culture);

            if (thisDate >= startingDate)
            {
                if(taskList[l].submitted < 150)
                {
                    taskList[l].status = "Active";
                    taskList[l].statusColor = "#541BD7";
                    taskList[l].isTaskSubPending = "Block";
                    taskList[l].isTaskSubDone = "None";
                    taskList[l].isTaskSubNootDone = "None";
                    taskList[l].isTaskSubColor = "#BFB10C";
                    taskList[l].status = "Active";
                }
                else
                {
                    taskList[l].status = "Inactive";
                }
            }
        }
        List<dataentryOperatorTask> SortedList = new List<dataentryOperatorTask>();
        SortedList = taskList.OrderBy(x => x.status).ToList();
        taskList = SortedList;
        LiveshowInfo = taskList;
    }


    public async Task GetTeacherQuestionHistory()
    {
        var thl = thList;

        for (int i = 0; i < thl.Count; i++)
        {
            if (thl[i].teacherID.ToString() == tID)
            {
                tqhList.Add(thl[i]);
            }
        }
        List<TeacherQuesHistory> SortedList = new List<TeacherQuesHistory>();
        SortedList = tqhList.OrderBy(x => x.review).ToList();
        SortedList.Reverse();
        tqhList.Clear();
        tqhList = SortedList;
        List<Question> thisqsList = new List<Question>();
        List<Question> ques = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getQuestion".GetJsonAsync<List<Question>>();
        int indexCount = 1;
        for (int i = 0; i < ques.Count; i++)
        {
            for (int j = 0; j < tqhList.Count; j++)
            {
                if (tqhList[j].questionID == ques[i].questionID)
                {
                    Question thisQs = new Question();
                    thisQs = ques[i];
                    thisQs.index = indexCount;
                    thisQs.publishingDate = tqhList[j].review;
                    thisQs.op1BackColor = "Gray";
                    thisQs.op2BackColor = "Gray";
                    thisQs.op3BackColor = "Gray";
                    thisQs.op4BackColor = "Gray";
                    thisQs.qsimgvisi = (thisQs.quesImages != "N/A") ?"Block" : "None";
                    thisQs.op1imgvisi = (thisQs.opOneImg != "N/A") ? "Block" : "None";
                    thisQs.op2imgvisi = (thisQs.opTwoImg != "N/A") ? "Block" : "None";
                    thisQs.op3imgvisi = (thisQs.opThreeImg != "N/A") ? "Block" : "None";
                    thisQs.op4imgvisi = (thisQs.opFourImg != "N/A") ? "Block" : "None";


                    if (thisQs.rightAnswer == 1)
                    {
                        thisQs.op1BackColor = "Green";
                    }
                    if (thisQs.rightAnswer == 2)
                    {
                        thisQs.op2BackColor = "Green";
                    }
                    if (thisQs.rightAnswer == 3)
                    {
                        thisQs.op3BackColor = "Green";
                    }
                    if (thisQs.rightAnswer == 4)
                    {
                        thisQs.op4BackColor = "Green";
                    }
                    if (thisQs.review == 0)
                    {
                        thisQs.reviewName = "Pending";
                        thisQs.reviewColor = "Gray";
                    }
                    if (thisQs.review == 1)
                    {
                        thisQs.reviewName = "Approved";
                        thisQs.reviewColor = "Green";
                    }
                    if (thisQs.review == 2)
                    {
                        thisQs.reviewName = "Not Approved";
                        thisQs.reviewColor = "Red";
                    }
                    thisqsList.Add(thisQs);
                    indexCount++;
                }
            }
        }
        List<Question> SortedListNew = new List<Question>();
        SortedListNew = thisqsList.OrderBy(x => x.review).ToList();
        thisqsList.Clear();
        thisqsList = SortedListNew;
        showQSList = thisqsList;
        int count = 1;
        for (int i = 0; i < showQSList.Count; i++)
        {
            if (count % 1 == 0 && showQSList[i].review == 0)
            {
                count++;
                showQSList1.Add(showQSList[i]);
                showQSList.RemoveAt(i);
            }
            if (count % 2 == 0 && showQSList[i].review == 0)
            {
                count++;
                showQSList2.Add(showQSList[i]);
                showQSList.RemoveAt(i);
            }
            if (count % 3 == 0 && showQSList[i].review == 0)
            {
                count++;
                showQSList3.Add(showQSList[i]);
                showQSList.RemoveAt(i);
            }
            if (count % 4 == 0 && showQSList[i].review == 0)
            {
                count++;
                showQSList4.Add(showQSList[i]);
                showQSList.RemoveAt(i);
            }
        }

        int div = showQSList.Count / 4;
        int part = 1;
        if(div != 0)
        {
            for (int i = 0; i < showQSList.Count; i++)
            {
                if (i != 0)
                {
                    if (i % div == 0)
                    {
                        part++;
                    }
                }
                if (part == 1)
                {
                    showQSList1.Add(showQSList[i]);
                }
                if (part == 2)
                {
                    showQSList2.Add(showQSList[i]);
                }
                if (part == 3)
                {
                    showQSList3.Add(showQSList[i]);
                }
                if (part == 4)
                {
                    showQSList4.Add(showQSList[i]);
                }
                if (part == 5)
                {
                    showQSList1.Add(showQSList[i]);
                }


            }

            List<Question> SortedList1 = new List<Question>();
            SortedList1 = showQSList1.OrderBy(x => x.review).ToList();
            showQSList1 = SortedList1;

            List<Question> SortedList2 = new List<Question>();
            SortedList2 = showQSList2.OrderBy(x => x.review).ToList();
            showQSList2 = SortedList2;

            List<Question> SortedList3 = new List<Question>();
            SortedList3 = showQSList3.OrderBy(x => x.review).ToList();
            showQSList3 = SortedList3;

            List<Question> SortedList4 = new List<Question>();
            SortedList4 = showQSList4.OrderBy(x => x.review).ToList();
            showQSList4 = SortedList4;
        }


    }
    public void ShowCreativeQs()
    {

        foreach(var item in thList)
        {
            foreach(var crqs in allcreativeqs)
            {

            }
        }

    }
    public async Task GetHistoryCount()
    {
        int count = 0;
        var list = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getTeacherQuestionHistory".GetJsonAsync<List<TeacherQuesHistory>>();
        for (int i = 0; i < list.Count; i++)
        {
            if (tID == list[i].teacherID.ToString())
            {
                count++;
                foreach (var qs in quesList)
                {
                    if (qs.questionID == list[i].questionID)
                    {
                        if (qs.review == 0)
                        {
                            tpe++;
                        }
                        if (qs.review == 1)
                        {
                            tap++;
                        }
                        if (qs.review == 2)
                        {
                            tde++;
                        }
                    }
                }

            }
            countTQH = count;
        }
    }



    public async Task GetClassSubChap()
    {


        allClassList = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getClassInfo".GetJsonAsync<List<ClassInfo>>();
        allSubject = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getSubject".GetJsonAsync<List<Subject>>();
        allChapter = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getChapter".GetJsonAsync<List<Chapter>>();


    }



    public async Task GetTeacherWithID()
    {
        var list = teacherListN;
        for (int i = 0; i < list.Count; i++)
        {
            if (tID == list[i].teacherID.ToString())
            {
                tName = list[i].name;
            }
        }
    }


    List<int> numList = new List<int>();
    string selectedMCQList;
    List<Chapter> selectedChapter = new List<Chapter>();
    private Random random = new Random();
    public string RandomString(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        return new string(Enumerable.Repeat(chars, length)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }
    public void GetALlChapter()
    {

        for (int i = 0; i < allc.Count; i++)
        {

            for (int j = 0; j < quesList.Count; j++)
            {
                if (quesList[j].chapterID == allc[i].chapterID)
                {

                    if (quesList[j].review == 1)
                    {
                        allc[i].approvedQS++;
                    }
                }
            }

            selectedChapter.Add(allc[i]);
        }
    }
    public async Task<QuestionPdfLink> getNewChapterToAssign()
    {
        QuestionPdfLink chapter = new QuestionPdfLink();
        var allPdfLink = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getQuestionPdfLink".GetJsonAsync<List<QuestionPdfLink>>();

        for (int i = 0; i < selectedChapter.Count; i++)
        {
            if (selectedChapter[i].approvedQS < 50)
            {
                for (int j = 0; j < allPdfLink.Count; j++)
                {

                    if (selectedChapter[i].chapterID == allPdfLink[j].chapterID)
                    {
                        bool isAssigned = false;
                        for (int k = 0; k < operatorList.Count; k++)
                        {
                            if (selectedChapter[i].chapterID == operatorList[k].chapterID)
                            {
                                isAssigned = true;
                            }
                        }
                        if (isAssigned)
                        {
                            break;
                        }
                        for (int k = 0; k < allsub.Count; k++)
                        {
                            if (selectedChapter[i].subjectID == allsub[k].subjectID)
                            {
                                if (allsub[k].groupName == "Science" || allsub[k].groupName == "Com" && allsub[k].subjectID == selectedChapter[i].subjectID)
                                {

                                    return allPdfLink[j];
                                }
                            }
                        }


                    }


                }
            }


        }


        return chapter;

    }
    public async Task AutomatedTaskAssigner(int opID)
    {

        if (canMakenewTask)
        {
            MakeQSTxt = "Making New Task. Please Wait...";
            GetALlChapter();
            QuestionPdfLink thisSelectedChapterToAsign = await getNewChapterToAssign();
            CopyNum(thisSelectedChapterToAsign.noOfQues);
            var id = RandomString(50);
            string sd = DateTime.Now.ToString("MM/dd/yyyy hh:mm tt");
            string ed = DateTime.Now.AddDays(1).ToString("MM/dd/yyyy hh:mm tt");
            string thisd = DateTime.Now.ToString("dddd, dd MMMM yyyy");
            var res1 = await "https://api.shikkhanobish.com/api/ShikkhanobishTeacher/setdataentryOperatorTask".PostUrlEncodedAsync(new
            {
                userID = opID,
                MCQNumbers = selectedMCQList + " Link#" + thisSelectedChapterToAsign.link,
                date = opID,
                chapterID = thisSelectedChapterToAsign.chapterID,
                taskID = id,
                startTime = sd,
                endTime = ed
            })
    .ReceiveJson<Response>();

            await Refresh();
            MakeQSTxt = "Done";
            await Task.Delay(1000);
            MakeQSTxt = "Make New Task";
        }
        else
        {
            makeTaskError = "You can make new task after(MM/DD/YY) : " + lastTaskEndTime;
        }

    }
    public void CopyNum(int totalChapQues)
    {
        selectedMCQList = "";
        numList = new List<int>();
        Random rn = new Random();

        List<int> list = new List<int>();
        int num = 0;
        int totalChQNum = Convert.ToInt32(totalChapQues);
        if (totalChQNum <= 160)
        {
            num = totalChQNum;
            for (int i = 0; i < num; i++)
            {
                if (i == 150)
                {
                    break;
                }
                list.Add(i + 1);
            }
            numList = list;
        }
        else
        {
            num = 150;
            int reqNum = Convert.ToInt32(150);
            while (list.Count <= reqNum)
            {
                int thisNum = rn.Next(1, totalChQNum);
                bool match = false;
                for (int j = 0; j < list.Count; j++)
                {
                    if (list[j] == thisNum)
                    {
                        match = true;
                        break;
                    }
                }
                if (!match)
                {
                    list.Add(thisNum);
                }
            }
            numList = list;
        }



        List<int> SortedList = new List<int>();
        SortedList = numList.OrderBy(x => x).ToList();
        numList = SortedList;
        for (int i = 0; i < numList.Count; i++)
        {
            if (i == numList.Count - 1)
            {
                selectedMCQList = selectedMCQList + numList[i];
            }
            else
            {
                selectedMCQList = selectedMCQList + numList[i] + " , ";
            }

        }
    }




}

