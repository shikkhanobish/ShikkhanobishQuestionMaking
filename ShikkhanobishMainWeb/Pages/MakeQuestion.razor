@using ShikkhanobishMainWeb.Models
@using Flurl.Http
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@inject IWebHostEnvironment Environment
@inject ILogger<MakeQuestion> Logger


@page "/"

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <title>MakeQuestion</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta content="Responsive bootstrap 4 admin template" name="description" />
    <meta content="Coderthemes" name="author" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link href="~/css/makeQues.css" />
    <link href="~/css/responsivePage.css" />
</head>

<body style="background-color:white">

    <!-- Begin page -->
    <!-- Start Page Content here -->
    <!-- ============================================================== -->
    <br />



    <div class="content">

        <!-- Start container-fluid -->
        <div class="container-fluid">
            <div>
                <div class="form-group row">
                    <div class="col-md-4 ">
                        <a href="@($"/{tID}")">
                            <i class="fas fa-backward btn btn-outline-purple" style="color: #7F08E6"></i>
                        </a>
                    </div>

                    <div class="col-md-4 " style="text-align:center">
                        <span style="font-size: 24px; color: black ">Shikkhanobish</span><h3 style="color:black">Question Making</h3>
                    </div>

                </div>

                <br />
                <br />


                <div>

                    <div class="form-group row">
                        <div class="col-md-4 ">
                            <select class="form-control btn btn-purple" id="class" @onchange="ClassChanged">
                                <option style="" value="">-- Select Class --</option>
                                @foreach (var item in objList)
                                {
                                    <option value="@item.classID">@item.name</option>
                                }
                            </select>

                        </div>
                        <div class="col-md-4 ">
                            <select class="form-control btn btn-purple" id="subject" @onchange="SubjectChanged">
                                <option value="">-- Select Subject --</option>
                                @foreach (var item in objList2)
                                {
                                    <option value="@item.subjectID">@item.name</option>
                                }
                            </select>

                        </div>
                        <div class="col-md-4 ">
                            <select class="form-control btn btn-purple" id="chapter" @onchange="ChapterChanged">
                                <option value="">-- Select Chapter --</option>
                                @foreach (var item in objList3)
                                {
                                    <option value="@item.chapterID">@item.name</option>
                                }
                            </select>

                        </div>

                    </div>
                    <br />
                    <br />
                    <br />


                    <div class="form-group row">
                        <div class="col-12">
                            <h6 style="color:#7146FE">Write Question</h6>
                            <textarea class="form-control col-12" style="height:150px" @bind="Question.mainQuestion"></textarea>
                            <button class="btn btn-info" @onclick="checksimilarity">Check Match Rate</button><label style="color: @mtColor"> @mathRate</label><br />
                            <br />
                            <div style="width: auto; height: auto; border-color: black; border: 1px ">
                                <InputFile OnChange="@LoadFiles" /><br/><br />
                                <button style="display: @displayImage" class="btn btn-danger" @onclick="calceImage">Cancle</button>
                                <br/>
                                <img style="display: @displayImage" class="makeQuesImage" src="@imageString" @onclick="GetSubInfo" />
                            </div>
                        </div>

                    </div>

                    <div class="form-group row">
                        <div class="col-8">
                            <h6 style="color:#7146FE">Option1:</h6>
                            <textarea class="form-control" @bind="Question.option1" style="height: 100px; text-align: center; "></textarea>

                        </div>
                        <div class="col-8">
                            <h6 style="color:#7146FE">Option2:</h6>
                            <textarea class="form-control" @bind="Question.option2" style="height: 100px; text-align: center;"></textarea>

                        </div>
                        <div class="col-8">
                            <h6 style="color:#7146FE">Option3:</h6>
                            <textarea class="form-control" @bind="Question.option3" style=" height: 100px; text-align: center;"></textarea>

                        </div>
                        <div class="col-8">
                            <h6 style="color:#7146FE">Option4:</h6>
                            <textarea class="form-control " @bind="Question.option4" style=" height: 100px; text-align: center;"></textarea>

                        </div>
                    </div>



                    <br />
                    <hr />
                    <div class="">
                        <h6 style="color:#7146FE">Right Answer</h6>
                        <br />
                        <button name="rightans" value="A" style=" background-color: @selectedColorone; color: #158A4E" class="btn btn-outline-success" @onclick="sbOne">A</button>&nbsp;
                        <button name="rightans" value="B" style=" background-color: @selectedColortwo; color: #158A4E " class="btn btn-outline-success" @onclick="sbTwo">B</button>&nbsp;
                        <button name="rightans" value="C" style=" background-color: @selectedColorthree; color: #158A4E" class="btn btn-outline-success" @onclick="sbThree">C</button>&nbsp;
                        <button name="rightans" value="D" style=" background-color: @selectedColorfour; color: #158A4E" class="btn btn-outline-success" @onclick="sbFour">D</button>
                    </div>
                    <br />
                    <br />
                    <div class="offset-3">
                        <button type="submit" style=" font-size:16px" class="btn btn-success" @onclick="SubmitQuestion">@btnstring</button>
                    </div>
                    <label style="color: @msgColor"> @msg</label>
                    <br />
                    <br />
                    <!-- Button trigger modal -->
                    <!-- Modal -->

                    <br />


                </div>

            </div>



        </div>
        <br />
        <!-- end container-fluid -->
        <!-- Footer Start -->
        <footer class="footer">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-12">
                        2021 &copy; shikkhanobish
                    </div>
                </div>
            </div>
        </footer>
        <!-- end Footer -->
    </div>
    <!-- end content -->
    <!-- END wrapper -->
    <!-- Vendor js -->

</body>
</html>


@code{




    [Parameter]
    public string tID { get; set; }
    public string btnstring { get; set; }
    public string tName { get; set; }
    public string mathRate { get; set; }
    public TeacherQuesHistory TeacherQuesHistory = new TeacherQuesHistory();
    int thisMathRate { get; set; }
    string cid { get; set; }
    string sid { get; set; }
    string chid { get; set; }
    string msg { get; set; }
    string msgColor { get; set; }
    string displayImage;
    private Question Question1;
    public Question Question = new Question();
    string hidemodel { get; set; }
    List<ClassInfo> objList = new List<ClassInfo>();
    List<Subject> objList2 = new List<Subject>();
    List<Chapter> objList3 = new List<Chapter>();
    List<Question> quesList = new List<Question>();
    List<Subject> allSubject = new List<Subject>();
    List<Chapter> allChapter = new List<Chapter>();
    string selectedColorone = "";
    string selectedColortwo = "";
    string selectedColorthree = "";
    string selectedColorfour = "";
    string mtColor;

    protected override async Task OnInitializedAsync()
    {
        //page "/MakeQuestion/{tID}"
        displayImage = "None";
        objList3 = new List<Chapter>();
        btnstring = "Submit";

        hidemodel = "hidden";
        selectedColorone = "white";
        selectedColortwo = "white";
        selectedColorthree = "white";
        selectedColorfour = "white";

        //await GetClassInfo();
        await GetSubInfo();
        await GetChapterInfo();
        await GetTeacherWithID();
        objList = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getClassInfo".GetJsonAsync<List<ClassInfo>>();
        quesList = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getQuestion".GetJsonAsync<List<Question>>();


    }
    public async Task GetClassInfo()
    {
        //objList = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getClassInfo".GetJsonAsync<List<ClassInfo>>();

    }
    public void calceImage ()
    {
        displayImage = "None";
        imageString = "";
        }
    public async Task GetSubInfo()
    {
        allSubject = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getSubject".GetJsonAsync<List<Subject>>();

    }
    public async Task GetChapterInfo()
    {
        allChapter = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getChapter".GetJsonAsync<List<Chapter>>();

    }
    public void sbOne()
    {
        Question.rightAnswer = 1;
        selectedColorone = "#BDFFDD";
        selectedColortwo = "white";
        selectedColorthree = "white";
        selectedColorfour = "white";

    }
    public void sbTwo()
    {
        Question.rightAnswer = 2;
        selectedColorone = "White";
        selectedColortwo = "#BDFFDD";
        selectedColorthree = "white";
        selectedColorfour = "white";


    }
    public void sbThree()
    {
        Question.rightAnswer = 3;
        selectedColorone = "white";
        selectedColortwo = "white";
        selectedColorthree = "#BDFFDD";
        selectedColorfour = "white";

    }
    public void sbFour()
    {
        Question.rightAnswer = 4;
        selectedColorone = "white";
        selectedColortwo = "white";
        selectedColorthree = "white";
        selectedColorfour = "#BDFFDD";
    }
    private void ClassChanged(ChangeEventArgs classEvent)
    {

        objList2.Clear();
        cid = classEvent.Value.ToString();
        Question.classID = int.Parse(cid);
        for (int i = 0; i < allSubject.Count; i++)
        {
            if (allSubject[i].classID.ToString() == cid)
            {
                objList2.Add(allSubject[i]);

            }
        }
    }


    private void SubjectChanged(ChangeEventArgs subjectEvent)
    {
        objList3.Clear();
        sid = subjectEvent.Value.ToString();
        Question.subjectID = int.Parse(sid);

        for (int i = 0; i < allChapter.Count; i++)
        {
            if (allChapter[i].subjectID.ToString() == sid)
            {
                objList3.Add(allChapter[i]);

            }
        }
    }

    private void ChapterChanged(ChangeEventArgs chapterEvent)
    {
        chid = chapterEvent.Value.ToString();
        Question.chapterID = int.Parse(chid);
    }
    public async Task SubmitQuestion()
    {
        mathRate = "";
        btnstring = "Submitting Question...";
        int thisTeacherID = Int32.Parse(tID);
        Random rnd = new Random();

        int quesId = rnd.Next(100000, 9999999);
        int hisotyId = rnd.Next(100000, 9999999);
        checksimilarity();
        if (Question.classID != 0 && Question.subjectID != 0 && Question.chapterID != 0 && Question.mainQuestion != null && Question.mainQuestion != "" && Question.option1 != null && Question.option1 != "" &&
            Question.option2 != null && Question.option2 != "" && Question.option3 != null && Question.option3 != "" && Question.option4 != null && Question.option4 != "" && Question.rightAnswer != 0)
        {
            if (thisMathRate < 95)
            {
                msgColor = "Black";
                msg = "Submitting question...";
                string uri = "https://shikkhanobishrealtimeapi.shikkhanobish.com/api/ShikkhanobishSignalR/sumbitQs?&teacherID=" + thisTeacherID + "&qsID=" + quesId + "&errorTxt=" + "";
                HttpClient client = new HttpClient();
                StringContent content = new StringContent("", System.Text.Encoding.UTF32, "application/json");
                HttpResponseMessage response = await client.PostAsync(uri, content).ConfigureAwait(true);

                var res = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/setQuestion".PostUrlEncodedAsync(new
                {
                    questionID = quesId,
                    classID = Question.classID,
                    quesImages = imageString,
                    subjectID = Question.subjectID,
                    chapterID = Question.chapterID,
                    topicID = 0,
                    mainQuestion = Question.mainQuestion,
                    option1 = Question.option1,
                    option2 = Question.option2,
                    option3 = Question.option3,
                    option4 = Question.option4,
                    rightAnswer = Question.rightAnswer
                })
                   .ReceiveJson<Response>();

                string dateTime = DateTime.Now.ToString("dd'-'MM'-'yyyy' 'HH':'mm':'ss");

                var historyres = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/setTeacherQuestionHistory".PostUrlEncodedAsync(new
                {

                    tqID = hisotyId,
                    teacherID = thisTeacherID,
                    questionID = quesId,
                    review = dateTime
                })
                      .ReceiveJson<Response>();
                msg = "Question Uploaded Successfully";
                Question.mainQuestion = "";
                Question.option1 = "";
                Question.option2 = "";
                Question.option3 = "";
                Question.option4 = "";
                mathRate = "";
                Question.rightAnswer = 0;
                selectedColorone = "white";
                selectedColortwo = "white";
                selectedColorthree = "white";
                selectedColorfour = "white";
                mathRate = "";
            }

            else
            {
                msgColor = "Red";
                msg = "This question is already in the server or this type of question";
            }

        }
        else
        {
            msgColor = "Red";
            msg = "Please Fill Up Every Information";

        }

        btnstring = "Submit";
    }

    public async Task GetTeacherWithID()
    {
        var list = await "https://api.shikkhanobish.com/api/ShikkhanobishTeacher/getAllTeacher".PostJsonAsync(new { }).ReceiveJson<List<Teacher>>();
        for (int i = 0; i < list.Count; i++)
        {
            if (tID == list[i].teacherID.ToString())
            {
                tName = list[i].name;
            }
        }
    }
    public void checksimilarity()
    {
        mtColor = "Black";
        List<double> thiscim = new List<double>();
        for (int i = 0; i < quesList.Count; i++)
        {
            thiscim.Add(CalculateSimilarity(Question.mainQuestion, quesList[i].mainQuestion));
        }
        double max = 0;
        int index = 0;
        for (int i = 0; i < thiscim.Count; i++)
        {
            if (max < thiscim[i])
            {
                max = thiscim[i];
                index = i;
            }
        }
        max = Math.Round(max, 2);
        max = max * 100;
        int matchingRate = (int)max;
        if (matchingRate > 95)
        {
            mtColor = "Red";
        }
        mathRate = "";
        mathRate = "Max Match: " + matchingRate + "%" + " -> Question: " + quesList[index].mainQuestion;
        thisMathRate = matchingRate;

    }
    double CalculateSimilarity(string source, string target)
    {
        if ((source == null) || (target == null)) return 0.0;
        if ((source.Length == 0) || (target.Length == 0)) return 0.0;
        if (source == target) return 1.0;

        int stepsToSame = ComputeLevenshteinDistance(source, target);
        return (1.0 - ((double)stepsToSame / (double)Math.Max(source.Length, target.Length)));
    }
    int ComputeLevenshteinDistance(string source, string target)
    {
        if ((source == null) || (target == null)) return 0;
        if ((source.Length == 0) || (target.Length == 0)) return 0;
        if (source == target) return source.Length;

        int sourceWordCount = source.Length;
        int targetWordCount = target.Length;

        // Step 1
        if (sourceWordCount == 0)
            return targetWordCount;

        if (targetWordCount == 0)
            return sourceWordCount;

        int[,] distance = new int[sourceWordCount + 1, targetWordCount + 1];

        // Step 2
        for (int i = 0; i <= sourceWordCount; distance[i, 0] = i++) ;
        for (int j = 0; j <= targetWordCount; distance[0, j] = j++) ;

        for (int i = 1; i <= sourceWordCount; i++)
        {
            for (int j = 1; j <= targetWordCount; j++)
            {
                // Step 3
                int cost = (target[j - 1] == source[i - 1]) ? 0 : 1;

                // Step 4
                distance[i, j] = Math.Min(Math.Min(distance[i - 1, j] + 1, distance[i, j - 1] + 1), distance[i - 1, j - 1] + cost);
            }
        }

        return distance[sourceWordCount, targetWordCount];
    }
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    string imageString;
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        displayImage = "Block";
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(1))
        {
            try
            {
                loadedFiles.Add(file);

                var trustedFileNameForFileStorage = Path.GetRandomFileName();
                var path = Path.Combine(Environment.ContentRootPath,
                        Environment.EnvironmentName, "unsafe_uploads",
                        trustedFileNameForFileStorage);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(100000000).CopyToAsync(fs);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
            }
        }

        isLoading = false;
        imageString = await ImageOrVideoToServerReady(loadedFiles[0]);
    }

    public async Task<string> ImageOrVideoToServerReady(IBrowserFile file)
    {
        var Thisfile = file;

        var buffer = new byte[Thisfile.Size];
        await Thisfile.OpenReadStream(maxFileSize = 40000000).ReadAsync(buffer);
        //await ScanFile(buffer);
        return "data:" + Thisfile.ContentType + $";base64,{Convert.ToBase64String(buffer)}";
    }

}



