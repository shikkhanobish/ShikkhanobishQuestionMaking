@page "/"
@using System
@using System.IO
@using System.Buffers
@using Microsoft.AspNetCore.Hosting
@using nClam;
@using Microsoft.Extensions.Logging
@using Google.Cloud.Storage.V1;
@using Google.Cloud.Language.V1;
@using Google.Apis.Auth.OAuth2;
@inherits MathJaxBlazor.MathJaxContentComponent
@inject ILogger<Test> Logger
@inject IWebHostEnvironment Environment

<h3>Upload Image</h3>

<div>
    <div class="row">
        @foreach (var item in imagescr)
        {
        <div class="col-3" style="float: left; width: 100px; height:100px">
            <img src="@item" style="width: 100px; height: 100px; object-fit: contain; "/>
        </div>
           
        }
    </div>
</div>
<button @onclick="UploadFileSample">Upload in google</button>
<div>
    <div class="row">
        @foreach (var item in Uploadedimagescr)
        {
            <div class="col-3" style="float: left; width: 100px; height:100px">
                <img src="@item" style="width: 100px; height: 100px; object-fit: contain; " />
            </div>

        }
    </div>
</div>

@errorLBL
@code {
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 10000000;
    private int maxAllowedFiles = 4;
    private bool isLoading;
    string imageString;
    string text;
    string errorLBL;
    List<string> imagescr = new List<string>();
    List<string> Uploadedimagescr = new List<string>();
    List<FileStream> pendingFile = new List<FileStream>();
    string myMarkup = "<p class='markup'>This is a <b>markup string</b>.</p>";
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
            }
        }

        isLoading = false;
        for(int i = 0; i < loadedFiles.Count; i++)
        {
            imageString = await ImageOrVideoToServerReady(loadedFiles[i]);
            imagescr.Add(imageString);
        }

    }



    // Some APIs, like Storage, accept a credential in their Create()
    // method.
    public object AuthExplicit(string projectId, string jsonPath)
    {
        // Explicitly use service account credentials by specifying
        // the private key file.
        var credential = GoogleCredential.FromFile(jsonPath);
        var storage = StorageClient.Create(credential);
        // Make an authenticated API request.
        var buckets = storage.ListBuckets(projectId);

        return null;
    }

    public async Task UploadFileSample()
    {
        UploadImage up = new UploadImage();
        string rootpath = System.IO.Path.Combine(System.IO.Directory.GetCurrentDirectory(), "wwwroot");
        try
        {
            for (int i = 0; i < loadedFiles.Count; i++)
            {
                var trustedFileNameForFileStorage = Path.GetRandomFileName();
                string result = Path.GetTempPath();
                string gg = "https://images.shikkhanobish.com/uploadimage/";
                //var path = Path.Combine("C:/Inetpub/vhosts/shikkhanobish.com/", trustedFileNameForFileStorage);
                var path = Path.Combine(result, trustedFileNameForFileStorage);
                //var path = Path.Combine(Environment.ContentRootPath, "uploadimage", trustedFileNameForFileStorage);


                string tempFile = Path.GetTempFileName();
                await using FileStream fs = new(path, FileMode.Create);
                await loadedFiles[i].OpenReadStream(maxFileSize).CopyToAsync(fs);
                Uploadedimagescr.Add(up.UploadFileSample("shlivesupportimage", fs));
                errorLBL = "Done!";
            }
        }
        catch (Exception ex)
        {
            errorLBL = ex.Message;
            errorLBL += "    ///////////   "+ex.InnerException + "  " + rootpath;
        }


    }
    public async Task<string> ImageOrVideoToServerReady(IBrowserFile file)
    {
        var Thisfile = file;

        var buffer = new byte[Thisfile.Size];
        await Thisfile.OpenReadStream(maxFileSize = 40000000).ReadAsync(buffer);
        //await ScanFile(buffer);
        return "data:" + Thisfile.ContentType + $";base64,{Convert.ToBase64String(buffer)}";
    }
    public async Task<string> ScanFile(byte[] fileByte)
    {
        string result = "";
        try
        {
            var clam = new ClamClient("localhost", 44345);
            var scanResult = await clam.SendAndScanFileAsync(fileByte);  //any file you would like!

            switch (scanResult.Result)
            {
                case ClamScanResults.Clean:
                    result = "clean";
                    break;
                case ClamScanResults.VirusDetected:
                    result = "Vireus Found";
                    break;

                case ClamScanResults.Error:
                    result = "Erro";
                    break;

            }

        }
        catch (Exception ex)
        {

        }
        return result;
    }

}
