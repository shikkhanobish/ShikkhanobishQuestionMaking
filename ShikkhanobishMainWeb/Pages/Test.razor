@page "/"
@using System
@using System.IO
@using System.Buffers
@using Microsoft.AspNetCore.Hosting
@using nClam;
@using Microsoft.Extensions.Logging
@using Google.Cloud.Storage.V1;
@using Google.Cloud.Language.V1;
@using Google.Apis.Auth.OAuth2;
@inherits MathJaxBlazor.MathJaxContentComponent
@inject ILogger<Test> Logger
@inject IWebHostEnvironment Environment

<h3>Test</h3>








<h3>Upload Files</h3>
<button @onclick="UploadFileSample">Upload in google</button>
<p>
    <label>
        Max file size:
        <input type="number" @bind="maxFileSize" />
    </label>
</p>

<p>
    <label>
        Max allowed files:
        <input type="number" @bind="maxAllowedFiles" />
    </label>
</p>

<p>
    <label>
        Upload up to @maxAllowedFiles of up to @maxFileSize bytes:
        <InputFile OnChange="@LoadFiles" multiple />
    </label>
</p>

@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>
        @foreach (var file in loadedFiles)
        {
            <li>
                <ul>
                    <li>Name: @file.Name</li>
                    <li>Last modified: @file.LastModified.ToString()</li>
                    <li>Size (bytes): @file.Size</li>
                    <li>Content type: @file.ContentType</li>
                </ul>
            </li>
        }
    </ul>
}
<div class="card" style="width: 250px; height: 250px">
    <img src="@imageString"  />
    

</div>
@code {
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    string imageString;
    string text;
    string myMarkup = "<p class='markup'>This is a <b>markup string</b>.</p>";
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);

                var trustedFileNameForFileStorage = Path.GetRandomFileName();
                var path = Path.Combine(Environment.ContentRootPath,
                        Environment.EnvironmentName, "unsafe_uploads",
                        trustedFileNameForFileStorage);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
            }
        }

        isLoading = false;
        imageString = await ImageOrVideoToServerReady(loadedFiles[0]);
    }



    // Some APIs, like Storage, accept a credential in their Create()
    // method.
    public object AuthExplicit(string projectId, string jsonPath)
    {
        // Explicitly use service account credentials by specifying
        // the private key file.
        var credential = GoogleCredential.FromFile(jsonPath);
        var storage = StorageClient.Create(credential);
        // Make an authenticated API request.
        var buckets = storage.ListBuckets(projectId);

        return null;
    }







    public void UploadFileSample()
    {
        UploadImage up = new UploadImage();

        imageString = up.UploadFileSample("shlivesupportimage", "~/enhanced-emblem-234505-8ede9bde9f07.json");
    }
    public async Task<string> ImageOrVideoToServerReady(IBrowserFile file)
    {
        var Thisfile = file;

        var buffer = new byte[Thisfile.Size];
        await Thisfile.OpenReadStream(maxFileSize = 40000000).ReadAsync(buffer);
        //await ScanFile(buffer);
        return "data:" + Thisfile.ContentType + $";base64,{Convert.ToBase64String(buffer)}";
    }
    public async Task<string> ScanFile(byte[] fileByte)
    {
        string result = "";
        try
        {
            var clam = new ClamClient("localhost", 44345);
            var scanResult = await clam.SendAndScanFileAsync(fileByte);  //any file you would like!

            switch (scanResult.Result)
            {
                case ClamScanResults.Clean:
                    result = "clean";
                    break;
                case ClamScanResults.VirusDetected:
                    result = "Vireus Found";
                    break;

                case ClamScanResults.Error:
                    result = "Erro";
                    break;

            }

        }
        catch (Exception ex)
        {

        }
        return result;
    }

}
