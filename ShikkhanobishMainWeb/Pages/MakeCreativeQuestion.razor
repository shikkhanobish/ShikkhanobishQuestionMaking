@using ShikkhanobishMainWeb.Models
@using Flurl.Http
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@inherits MathJaxBlazor.MathJaxContentComponent
@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment Environment
@inject ILogger<MakeQuestion> Logger
@*@page "/Make Creative Question/{tID}"*@
@page "/Make Creative Question"

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <title>MakeQuestion</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta content="Responsive bootstrap 4 admin template" name="description" />
    <meta content="Coderthemes" name="author" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link href="~/css/makeQues.css" />
    <link href="~/css/responsivePage.css" />
</head>

<body style="background-color:white">

    <!-- Begin page -->
    <!-- Start Page Content here -->
    <!-- ============================================================== -->
    <br />



    <div class="content">

        <!-- Start container-fluid -->
        <div class="container-fluid">
            <div>

                <div>

                    <div class="form-group row">

                        <div style="background-color: #4317C1; border-radius: 10px; text-align: center; color: white">
                            <b style="font-size: 17px;">Task Info</b> <br /><br />
                            <select class="form-control" style="color: #4317C1 " id="class" @onchange="TaskSelect">
                                <option style="" value="">-- Select Task --</option>
                                @foreach (var item in thisOpTass)
                                {
                                    <option value="@item.taskID">@item.ActiveStatus :: @item.date</option>
                                }
                            </select>
                            <a>@ThisQuestion.className</a><br />
                            <a>@ThisQuestion.subjectName</a><br />
                            <a>@ThisQuestion.ChapterName</a><br />
                        </div>



                    </div>
                    <br />
                    <div class="card">
                        <div class="card-body">
                            <div class="row">
                                <div style="text-align: center">
                                    <b style="font-size: 17px;">Equation Generator</b> <br /><br />
                                </div>
                                <button class="btn btn-primary col-auto m-2" @onclick="changeToCode1">Code Generator 1</button>
                                <button class="btn btn-primary col-auto m-2" @onclick="changeToCode2">Code Generator 2</button>
                                <button class="btn btn-outline-dark col-auto m-1" @onclick="ShowCodeGen">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                                        <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z" />
                                        <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z" />
                                    </svg>
                                </button>
                                <button class="btn btn-outline-dark col-auto m-1" @onclick="HideCodeGen">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash-fill" viewBox="0 0 16 16">
                                        <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7.029 7.029 0 0 0 2.79-.588zM5.21 3.088A7.028 7.028 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474L5.21 3.089z" />
                                        <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829l-2.83-2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12-.708.708z" />
                                    </svg>
                                </button>
                            </div>
                            <iframe src="@srcCodeGen " title="description" style="width: 100%; height: 500px; display:@displayCodegen"></iframe>
                        </div>
                    </div>
                    <br />


                    <div class="form-group row">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-body">
                                    <div style="text-align: center">
                                        <b style="font-size: 17px;">Write Question</b> <br /><br />
                                        <button class="btn btn-outline-dark col-auto m-1" @onclick="AddEquation">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-code-slash" viewBox="0 0 16 16">
                                                <path d="M10.478 1.647a.5.5 0 1 0-.956-.294l-4 13a.5.5 0 0 0 .956.294l4-13zM4.854 4.146a.5.5 0 0 1 0 .708L1.707 8l3.147 3.146a.5.5 0 0 1-.708.708l-3.5-3.5a.5.5 0 0 1 0-.708l3.5-3.5a.5.5 0 0 1 .708 0zm6.292 0a.5.5 0 0 0 0 .708L14.293 8l-3.147 3.146a.5.5 0 0 0 .708.708l3.5-3.5a.5.5 0 0 0 0-.708l-3.5-3.5a.5.5 0 0 0-.708 0z" />
                                            </svg>
                                        </button>
                                        <button class="btn btn-outline-dark col-auto m-1" @onclick="checksimilarity">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-activity" viewBox="0 0 16 16">
                                                <path fill-rule="evenodd" d="M6 2a.5.5 0 0 1 .47.33L10 12.036l1.53-4.208A.5.5 0 0 1 12 7.5h3.5a.5.5 0 0 1 0 1h-3.15l-1.88 5.17a.5.5 0 0 1-.94 0L6 3.964 4.47 8.171A.5.5 0 0 1 4 8.5H.5a.5.5 0 0 1 0-1h3.15l1.88-5.17A.5.5 0 0 1 6 2Z" />
                                            </svg>
                                            <label style="color: @mtColor"> @mathRate</label>
                                        </button>
                                    </div>
                                    <textarea class="form-control col-12" style="height: 150px; background-color: #F1F1F1" @bind="ThisQuestion.mainQuestion"></textarea>
                                    <br />

                                </div>

                            </div>


                        </div>

                    </div>
                    <br />
                    <br />
                    <div class="form-group row">
                        <div class="col-12 card">
                            <div class="card-body fa-align-center">
                                <div class="card-title">
                                    <h6 style="color:#7146FE">Question 1</h6>
                                </div>
                                <textarea class="form-control" @bind="ThisQuestion.firstQuestion" style=" text-align: center; background-color: #F4F4F4"></textarea>
                                <br />
                                <div>

                                </div>
                                <h6 style="color:green">Answer</h6>
                                <textarea class="form-control" @bind="ThisQuestion.firstqsAns" style="height: 100px; text-align: center; background-color: #F4F4F4"></textarea>
                                <br />
                                <div>

                                </div>
                            </div>

                        </div>
                        <div class="col-12 card">
                            <div class="card-body">
                                <div class="card-title">
                                    <h6 style="color:#7146FE">Question 2</h6>
                                </div>
                                <textarea class="form-control" @bind="ThisQuestion.secondQuestion" style=" text-align: center; background-color: #F4F4F4"></textarea>
                                <br />
                                <div>

                                </div>
                                <h6 style="color:green">Answer</h6>
                                <textarea class="form-control" @bind="ThisQuestion.secondqsAns" style="height: 100px; text-align: center; background-color: #F4F4F4"></textarea>
                                <br />
                                <div>

                                </div>
                            </div>

                        </div>
                        <div class="col-12 card">
                            <div class="card-body">
                                <div class="card-title">
                                    <h6 style="color:#7146FE">Question 3</h6>
                                </div>
                                <textarea class="form-control" @bind="ThisQuestion.thirdQuestion" style=" text-align: center; background-color: #F4F4F4"></textarea>
                                <br />
                                <div>

                                </div>
                                <h6 style="color:green">Answer</h6>
                                <textarea class="form-control" @bind="ThisQuestion.thirqsAns" style="height: 200px; text-align: center; background-color: #F4F4F4"></textarea>
                                <br />
                                <div>

                                </div>
                            </div>

                        </div>
                        <div class="col-12 card">
                            <div class="card-body">
                                <div class="card-title">
                                    <h6 style="color:#7146FE">Question 4</h6>
                                </div>
                                <textarea class="form-control" @bind="ThisQuestion.forthQuestion" style=" text-align: center; background-color: #F4F4F4"></textarea>
                                <br />
                                <div>

                                </div>
                                <h6 style="color:green">Answer</h6>
                                <textarea class="form-control" @bind="ThisQuestion.forthqsAns" style="height: 300px; text-align: center; background-color: #F4F4F4"></textarea>
                                <br />
                                <div>

                                </div>
                            </div>

                        </div>
                    </div>



                    <br />

                    <div class="row">
                        <button type="submit" style=" font-size:16px" class="btn btn-success col-3" @onclick="SubmitQuestion">@btnstring</button>
                    </div>
                    <label style="color: @msgColor"> @msg</label>
                    <br />
                    <br />
                    <!-- Button trigger modal -->
                    <!-- Modal -->

                    <br />


                </div>

            </div>



        </div>
        <br />
        <!-- end container-fluid -->
        <!-- Footer Start -->
        <footer class="footer">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-12">
                        2021 &copy; shikkhanobish
                    </div>
                </div>
            </div>
        </footer>
        <!-- end Footer -->
    </div>
    <!-- end content -->
    <!-- END wrapper -->
    <!-- Vendor js -->

</body>
</html>


@code{




    public string tID { get; set; }
    public string btnstring { get; set; }
    public string tName { get; set; }
    public string mathRate { get; set; }
    public TeacherQuesHistory TeacherQuesHistory = new TeacherQuesHistory();
    int thisMathRate { get; set; }
    string cid { get; set; }
    string sid { get; set; }
    string chid { get; set; }
    string msg { get; set; }
    string srcCodeGen { get; set; }
    string msgColor { get; set; }
    string displayImage;
    string displayCodegen;
    private Question Question1;
    public CreativeQuestion ThisQuestion = new CreativeQuestion();
    int gg;
    string hidemodel { get; set; }
    List<ClassInfo> objList = new List<ClassInfo>();
    List<Subject> objList2 = new List<Subject>();
    List<Chapter> objList3 = new List<Chapter>();
    List<Question> quesList = new List<Question>();
    List<Subject> allSubject = new List<Subject>();
    List<Chapter> allChapter = new List<Chapter>();
    string selectedColorone = "";
    string selectedColortwo = "";
    string selectedColorthree = "";
    string selectedColorfour = "";
    string mtColor;
    CreativeQuestion QuestionPR = new CreativeQuestion();
    public string previewQS { get; set; }
    public string previewOP1 { get; set; }
    public string previewOP2 { get; set; }
    public string previewOP3 { get; set; }
    public string previewOP4 { get; set; }
    string selectedTask;
    List<dataentryOperatorTask> thisOpTass = new List<dataentryOperatorTask>();

    protected override async Task OnInitializedAsync()
    {
        //page "/MakeQuestion/{tID}"
        tID = StaticPageToPassData.thisOperatorID;
        srcCodeGen = "https://latexeditor.lagrida.com/";
        displayImage = "None";
        objList3 = new List<Chapter>();
        btnstring = "Submit";
        displayCodegen = "None";
        hidemodel = "hidden";
        selectedColorone = "white";
        selectedColortwo = "white";
        selectedColorthree = "white";
        selectedColorfour = "white";
        QuestionPR.mainQuestion = "N/A";

        allSubject = StaticPageToPassData.allsub;
        allChapter = StaticPageToPassData.allc;
        await GetTeacherWithID();
        objList = StaticPageToPassData.allClass;
        quesList = StaticPageToPassData.allMCQQs;
        var operatorList = StaticPageToPassData.allTask;
        var teacherListN = StaticPageToPassData.allTeacher;

        int id = 0;
        foreach (var teacher in teacherListN)
        {
            if (teacher.teacherID == int.Parse(tID))
            {
                id = teacher.teacherID;
                break;
            }
        }
        foreach (var item in operatorList)
        {
            if (item.userID == id && item.taskType == 2)
            {
                thisOpTass.Add(item);
            }
        }
        List<dataentryOperatorTask> SortedList = new List<dataentryOperatorTask>();
        SortedList = thisOpTass.OrderBy(x => x.ActiveStatus).ToList();
        thisOpTass = SortedList;
    }
    public void setIndex()
    {
        StaticPageToPassData.index = 1;
    }
    public void changeToCode1()
    {
        srcCodeGen = "https://latexeditor.lagrida.com/";
    }
    public void changeToCode2()
    {
        srcCodeGen = "https://arachnoid.com/latex/index.html";
    }
    public void HideCodeGen()
    {
        displayCodegen = "None";
    }
    public void ShowCodeGen()
    {
        displayCodegen = "Block";
    }
    public async Task GetClassInfo()
    {
        //objList = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getClassInfo".GetJsonAsync<List<ClassInfo>>();

    }
    public void AddEquation()
    {
        ThisQuestion.mainQuestion += "<equation></equation>";
    }
    public bool firstTime = true;




    public void calceImage()
    {
        displayImage = "None";
        imageString = "";
    }
    public async Task GetSubInfo()
    {
        allSubject = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getSubject".GetJsonAsync<List<Subject>>();

    }
    public async Task GetChapterInfo()
    {
        allChapter = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getChapter".GetJsonAsync<List<Chapter>>();

    }

    private void ClassChanged(ChangeEventArgs classEvent)
    {

        objList2.Clear();
        cid = classEvent.Value.ToString();
        ThisQuestion.classID = int.Parse(cid);
        for (int i = 0; i < allSubject.Count; i++)
        {
            if (allSubject[i].classID.ToString() == cid)
            {
                objList2.Add(allSubject[i]);

            }
        }
    }
    dataentryOperatorTask selectedtask = new dataentryOperatorTask();
    private void TaskSelect(ChangeEventArgs classEvent)
    {
        selectedTask = classEvent.Value.ToString();
        for (int i = 0; i < thisOpTass.Count; i++)
        {
            if (selectedTask == thisOpTass[i].taskID)
            {
                selectedtask = thisOpTass[i];
            }
        }
        for (int i = 0; i < allChapter.Count; i++)
        {
            if (allChapter[i].chapterID == selectedtask.chapterID)
            {
                ThisQuestion.ChapterName = allChapter[i].name;
                ThisQuestion.classID = allChapter[i].classID;
                ThisQuestion.chapterID = allChapter[i].chapterID;
                ThisQuestion.subjectID = allChapter[i].subjectID;
                for (int j = 0; j < allSubject.Count; j++)
                {
                    if (allSubject[j].subjectID == allChapter[i].subjectID)
                    {
                        ThisQuestion.subjectName = allSubject[j].name;
                        for (int k = 0; k < objList.Count; k++)
                        {
                            if (objList[k].classID == allSubject[j].classID)
                            {
                                ThisQuestion.className = objList[k].name;
                            }
                        }
                    }

                }
            }
        }
    }

    private void SubjectChanged(ChangeEventArgs subjectEvent)
    {
        objList3.Clear();
        sid = subjectEvent.Value.ToString();
        ThisQuestion.subjectID = int.Parse(sid);

        for (int i = 0; i < allChapter.Count; i++)
        {
            if (allChapter[i].subjectID.ToString() == sid)
            {
                objList3.Add(allChapter[i]);

            }
        }
    }

    private void ChapterChanged(ChangeEventArgs chapterEvent)
    {
        chid = chapterEvent.Value.ToString();
        ThisQuestion.chapterID = int.Parse(chid);
    }

    public async Task SubmitQuestion()
    {
        mathRate = "";
        btnstring = "Submitting Question...";
        int thisTeacherID = Int32.Parse(tID);
        Random rnd = new Random();

        string quesId = RandomString(20);
        int hisotyId = rnd.Next(100000, 9999999);
        checksimilarity();
        if (ThisQuestion.classID != 0 && ThisQuestion.subjectID != 0 && ThisQuestion.chapterID != 0 && ThisQuestion.mainQuestion != null && ThisQuestion.mainQuestion != "" && ThisQuestion.firstQuestion != null && ThisQuestion.firstQuestion != "" &&
            ThisQuestion.secondQuestion != null && ThisQuestion.secondQuestion != "" && ThisQuestion.thirdQuestion != null && ThisQuestion.thirdQuestion != "" && ThisQuestion.forthQuestion != null && ThisQuestion.forthQuestion != "" && ThisQuestion.firstqsAns != null && ThisQuestion.firstqsAns != "" &&
            ThisQuestion.secondqsAns != null && ThisQuestion.secondqsAns != "" && ThisQuestion.thirqsAns != null && ThisQuestion.thirqsAns != "" && ThisQuestion.forthqsAns != null && ThisQuestion.forthqsAns != "" )
        {
            if (thisMathRate < 95)
            {
                msgColor = "Black";
                msg = "Submitting question...";
                //string uri = "https://shikkhanobishrealtimeapi.shikkhanobish.com/api/ShikkhanobishSignalR/sumbitQs?&teacherID=" + thisTeacherID + "&qsID=" + quesId + "&errorTxt=" + "";
                //HttpClient client = new HttpClient();
                //StringContent content = new StringContent("", System.Text.Encoding.UTF32, "application/json");
                //HttpResponseMessage response = await client.PostAsync(uri, content).ConfigureAwait(true);
                //Test up = new Test();
                //List<IBrowserFile> files = new List<IBrowserFile>();
                //if (StaticPageToPassData.selectedFilesqs != null) { files.Add(StaticPageToPassData.selectedFilesqs); }
                //if (StaticPageToPassData.selectedFilesop1 != null) { files.Add(StaticPageToPassData.selectedFilesop1); }
                //if (StaticPageToPassData.selectedFilesop2 != null) { files.Add(StaticPageToPassData.selectedFilesop2); }
                //if (StaticPageToPassData.selectedFilesop3 != null) { files.Add(StaticPageToPassData.selectedFilesop3); }
                //if (StaticPageToPassData.selectedFilesop4 != null) { files.Add(StaticPageToPassData.selectedFilesop4); }
                //var imagesrc = await up.UploadFileSample(files);
                //int gap = 5 - imagesrc.Count;
                //for (int i = 0; i < gap; i++)
                //{
                //    imagesrc.Add("N/A");
                //}
                ThisQuestion.cQuestionID = quesId;
                ThisQuestion.review = 1;
                ThisQuestion.firstqsImg = "N/A";
                ThisQuestion.secodqsImg = "N/A";
                ThisQuestion.thirdqsImg = "N/A";
                ThisQuestion.forthqsImg = "N/A";
                ThisQuestion.firstqsAnsImg = "N/A";
                ThisQuestion.secondqsAnsImg = "N/A";
                ThisQuestion.thirqsAnsImg = "N/A";
                ThisQuestion.forthqsAnsImg = "N/A";

                var res = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/setCreativeQuestion".PostUrlEncodedAsync(new
                {
                    cQuestionID = ThisQuestion.cQuestionID,
                    classID = ThisQuestion.classID,
                    subjectID = ThisQuestion.subjectID,
                    chapterID = ThisQuestion.chapterID,
                    topicID = ThisQuestion.topicID,
                    mainQuestion = ThisQuestion.mainQuestion,
                    firstQuestion = ThisQuestion.firstQuestion,
                    secondQuestion = ThisQuestion.secondQuestion,
                    thirdQuestion = ThisQuestion.thirdQuestion,
                    forthQuestion = ThisQuestion.forthQuestion,
                    firstqsAns = ThisQuestion.firstqsAns,
                    secondqsAns = ThisQuestion.secondqsAns,
                    thirqsAns = ThisQuestion.thirqsAns,
                    forthqsAns = ThisQuestion.forthqsAns,
                    firstqsImg = ThisQuestion.firstqsImg,
                    secodqsImg = ThisQuestion.secodqsImg,
                    thirdqsImg = ThisQuestion.thirdqsImg,
                    forthqsImg = ThisQuestion.forthqsImg,
                    firstqsAnsImg = ThisQuestion.firstqsAnsImg,
                    secondqsAnsImg = ThisQuestion.secondqsAnsImg,
                    thirqsAnsImg = ThisQuestion.thirqsAnsImg,
                    forthqsAnsImg = ThisQuestion.forthqsAnsImg,
                    review = ThisQuestion.review

                })
.ReceiveJson<Response>();

                string dateTime = DateTime.Now.ToString("dd'-'MM'-'yyyy' 'HH':'mm':'ss");

                var historyres = await "https://api.shikkhanobish.com/api/ShikkhanobishTeacher/setteacherSubmitHistory".PostUrlEncodedAsync(new
                {

                    teacherSubmitHistoryID = hisotyId,
                    operatorID = thisTeacherID,
                    questionID = quesId,
                    date = dateTime
                })
                      .ReceiveJson<Response>();
                var re = await "https://api.shikkhanobish.com/api/ShikkhanobishTeacher/increaseSubmitCount".PostUrlEncodedAsync(new
                {

                    taskID = selectedtask.taskID,

                }).ReceiveJson<Response>();
                if (selectedtask.TotalSubmitted + 1 >= 150)
                {
                    var re1 = await "https://api.shikkhanobish.com/api/ShikkhanobishTeacher/MakeTaskInActive".PostUrlEncodedAsync(new
                    {

                        taskID = selectedtask.taskID,

                    }).ReceiveJson<Response>();
                }
                msg = "Question Uploaded Successfully";
                ThisQuestion.mainQuestion = "";
                ThisQuestion.firstQuestion = "";
                ThisQuestion.secondQuestion = "";
                ThisQuestion.thirdQuestion = "";
                ThisQuestion.forthQuestion = "";
                ThisQuestion.forthqsAns = "";
                ThisQuestion.secondqsAns = "";
                ThisQuestion.thirqsAns = "";
                ThisQuestion.forthqsAns = "";
                mathRate = "";
                selectedColorone = "white";
                selectedColortwo = "white";
                selectedColorthree = "white";
                selectedColorfour = "white";
                mathRate = "";
                StaticPageToPassData.qsPrv = "";
                StaticPageToPassData.op1Prv = "";
                StaticPageToPassData.op2Prv = "";
                StaticPageToPassData.op3Prv = "";
                StaticPageToPassData.op4Prv = "";
                StaticPageToPassData.selectedFilesqs = null;
                StaticPageToPassData.selectedFilesop1 = null;
                StaticPageToPassData.selectedFilesop2 = null;
                StaticPageToPassData.selectedFilesop3 = null;
                StaticPageToPassData.selectedFilesop4 = null;
            }

            else
            {
                msgColor = "Red";
                msg = "This question is already in the server or this type of question";
            }

        }
        else
        {
            msgColor = "Red";
            msg = "Please Fill Up Every Information";

        }

        btnstring = "Submit";
    }
    private static Random random = new Random();
    public static string RandomString(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        return new string(Enumerable.Repeat(chars, length)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }
    public async Task GetTeacherWithID()
    {
        var list = await "https://api.shikkhanobish.com/api/ShikkhanobishTeacher/getAllTeacher".PostJsonAsync(new { }).ReceiveJson<List<Teacher>>();
        for (int i = 0; i < list.Count; i++)
        {
            if (tID == list[i].teacherID.ToString())
            {
                tName = list[i].name;
            }
        }
    }
    public void checksimilarity()
    {
        mtColor = "Black";
        List<double> thiscim = new List<double>();
        for (int i = 0; i < quesList.Count; i++)
        {
            thiscim.Add(CalculateSimilarity(ThisQuestion.mainQuestion, quesList[i].mainQuestion));
        }
        double max = 0;
        int index = 0;
        for (int i = 0; i < thiscim.Count; i++)
        {
            if (max < thiscim[i])
            {
                max = thiscim[i];
                index = i;
            }
        }
        max = Math.Round(max, 2);
        max = max * 100;
        int matchingRate = (int)max;
        if (matchingRate > 95)
        {
            mtColor = "Red";
        }
        mathRate = "";
        mathRate = "Max Match: " + matchingRate + "%" + " -> Question: " + quesList[index].mainQuestion;
        thisMathRate = matchingRate;

    }
    double CalculateSimilarity(string source, string target)
    {
        if ((source == null) || (target == null)) return 0.0;
        if ((source.Length == 0) || (target.Length == 0)) return 0.0;
        if (source == target) return 1.0;

        int stepsToSame = ComputeLevenshteinDistance(source, target);
        return (1.0 - ((double)stepsToSame / (double)Math.Max(source.Length, target.Length)));
    }
    int ComputeLevenshteinDistance(string source, string target)
    {
        if ((source == null) || (target == null)) return 0;
        if ((source.Length == 0) || (target.Length == 0)) return 0;
        if (source == target) return source.Length;

        int sourceWordCount = source.Length;
        int targetWordCount = target.Length;

        // Step 1
        if (sourceWordCount == 0)
            return targetWordCount;

        if (targetWordCount == 0)
            return sourceWordCount;

        int[,] distance = new int[sourceWordCount + 1, targetWordCount + 1];

        // Step 2
        for (int i = 0; i <= sourceWordCount; distance[i, 0] = i++) ;
        for (int j = 0; j <= targetWordCount; distance[0, j] = j++) ;

        for (int i = 1; i <= sourceWordCount; i++)
        {
            for (int j = 1; j <= targetWordCount; j++)
            {
                // Step 3
                int cost = (target[j - 1] == source[i - 1]) ? 0 : 1;

                // Step 4
                distance[i, j] = Math.Min(Math.Min(distance[i - 1, j] + 1, distance[i, j - 1] + 1), distance[i - 1, j - 1] + cost);
            }
        }

        return distance[sourceWordCount, targetWordCount];
    }
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    string imageString;
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        displayImage = "Block";
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(1))
        {
            try
            {
                loadedFiles.Add(file);

                var trustedFileNameForFileStorage = Path.GetRandomFileName();
                var path = Path.Combine(Environment.ContentRootPath,
                        Environment.EnvironmentName, "unsafe_uploads",
                        trustedFileNameForFileStorage);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(100000000).CopyToAsync(fs);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
            }
        }

        isLoading = false;
        imageString = await ImageOrVideoToServerReady(loadedFiles[0]);
    }

    public async Task<string> ImageOrVideoToServerReady(IBrowserFile file)
    {
        var Thisfile = file;

        var buffer = new byte[Thisfile.Size];
        await Thisfile.OpenReadStream(maxFileSize = 40000000).ReadAsync(buffer);
        //await ScanFile(buffer);
        return "data:" + Thisfile.ContentType + $";base64,{Convert.ToBase64String(buffer)}";
    }

}



